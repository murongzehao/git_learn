C51 COMPILER V9.60.7.0   MAIN                                                              08/15/2024 18:04:26 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: e:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "config.h"
   2          #include "GPIO.h"
   3          #include "UART.h"
   4          #include "NVIC.h"
   5          #include "Switch.h"
   6          #include "Delay.h"
   7          
   8          //列
   9          #define KCOL1  P03
  10          #define KCOL2  P06
  11          #define KCOL3  P07
  12          #define KCOL4  P17
  13          
  14          //行
  15          #define KROW1  P34
  16          #define KROW2  P35
  17          #define KROW3  P40
  18          #define KROW4  P41
  19          
  20          /******************* IO配置函数 *******************/
  21          void  GPIO_config(void)
  22          {
  23   1          P0_MODE_IO_PU(GPIO_Pin_3 | GPIO_Pin_6 | GPIO_Pin_7)
  24   1          P1_MODE_IO_PU(GPIO_Pin_7)
  25   1          P3_MODE_IO_PU(GPIO_Pin_4 | GPIO_Pin_5)
  26   1          P4_MODE_IO_PU(GPIO_Pin_0 | GPIO_Pin_1)
  27   1      }
  28          
  29          /***************  串口初始化函数 *****************/
  30          void  UART_config(void)
  31          {
  32   1          COMx_InitDefine   COMx_InitStructure;         //结构定义
  33   1      
  34   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
  35   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串
             -口2固定使用BRT_Timer2)
  36   1          COMx_InitStructure.UART_BaudRate  = 115200ul;       //波特率, 一般 110 ~ 115200
  37   1          COMx_InitStructure.UART_RxEnable  = ENABLE;         //接收允许,   ENABLE或DISABLE
  38   1          COMx_InitStructure.BaudRateDouble = DISABLE;        //波特率加倍, ENABLE或DISABLE
  39   1          UART_Configuration(UART1, &COMx_InitStructure);     //初始化串口1 UART1,UART2,UART3,UART4
  40   1      
  41   1          NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,
             -Priority_2,Priority_3
  42   1      
  43   1          UART1_SW(UART1_SW_P30_P31);   //UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  44   1      }
  45          
  46          #define DOWM  0
  47          #define UP    1
  48          
  49          #define ROW_NUM  4
  50          #define COL_NUM  4
  51          
C51 COMPILER V9.60.7.0   MAIN                                                              08/15/2024 18:04:26 PAGE 2   

  52          u8 last_key_dowm = UP;
  53          
  54          
  55          void ROW_OUT(u8 row) {
  56   1          KROW1 = (row == 0) ? 0 : 1;
  57   1          KROW2 = (row == 1) ? 0 : 1;
  58   1          KROW3 = (row == 2) ? 0 : 1;
  59   1          KROW4 = (row == 3) ? 0 : 1;
  60   1      }
  61          
  62          //上一次按钮的状态
  63          u8 states[] = {
  64              1,1,1,1,    // 0, 1, 2, 3
  65              1,1,1,1,    // 4, 5, 6, 7,
  66              1,1,1,1,    // 8, 9,10,11,
  67              1,1,1,1,    //12,13,14,15,
  68          };
  69          
  70          u8 COL_IN(u8 col) {
  71   1          if(col == 0) return KCOL1;
  72   1          if(col == 1) return KCOL2;
  73   1          if(col == 2) return KCOL3;
  74   1          if(col == 3) return KCOL4;
  75   1      
  76   1          return 0;
  77   1      }
  78          
  79          #define IS_KEY_DOWN(row,col)      states[row * COL_NUM + col] == DOWM
  80          #define IS_KEY_UP(row,col)        states[row * COL_NUM + col] == UP
  81          #define SET_KEY_DOWN(row, col)    states[row * COL_NUM + col] = DOWM
  82          #define SET_KEY_UP(row, col)      states[row * COL_NUM + col] = UP
  83          void scan() {
  84   1          u8 row,col;
  85   1          //外循环遍历行
  86   1          for(row = 0; row < ROW_NUM; row++) {
  87   2              //控制每行的开关
  88   2              ROW_OUT(row);
  89   2              //内循环遍历列
  90   2              for(col = 0; col < COL_NUM; col++) {
  91   3                  if(COL_IN(col) == DOWM && states[row * COL_NUM + col] ) {
  92   4                      printf("第%d行第%d列按钮dowm\n",(int)row+1,(int)col+1);
  93   4                      SET_KEY_DOWN(row, col);
  94   4                  } else if(COL_IN(col) == UP && IS_KEY_DOWN(row, col)) {
  95   4                      printf("第 %d 行 %d 列按钮Up!\n", (int)row+1, (int)col+1);
  96   4                      SET_KEY_UP(row, col);
  97   4                  }
  98   3              }
  99   2      
 100   2          }
 101   1      
 102   1      
 103   1      
 104   1      
 105   1      
 106   1      }
 107          
 108          
 109          void main() {
 110   1      
 111   1          GPIO_config();
 112   1          UART_config();
 113   1      
C51 COMPILER V9.60.7.0   MAIN                                                              08/15/2024 18:04:26 PAGE 3   

 114   1          EA = 1;
 115   1      
 116   1          while(1) {
 117   2              scan();
 118   2      
 119   2      
 120   2          }
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    322    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
