C51 COMPILER V9.60.7.0   MAIN                                                              08/12/2024 09:12:08 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: e:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "Config.h"
   2          #include "GPIO.h"
   3          #include "Delay.h"
   4          #include "UART.h"
   5          #include "NVIC.h"
   6          #include "Switch.h"
   7          #include  "STC8H_PWM.h"
   8          
   9          #define LED_SW    P45
  10          #define LED1      P27
  11          #define LED2      P26
  12          #define LED3      P15
  13          #define LED4      P14
  14          #define LED5      P23
  15          #define LED6      P22
  16          #define LED7      P21
  17          #define LED8      P20
  18          
  19          /*************   配置 GPIO 引脚 **************/
  20          void GPIO_config(void) {
  21   1          GPIO_InitTypeDef  GPIO_InitStructure;   //结构定义
  22   1      
  23   1          // LED_SW
  24   1          GPIO_InitStructure.Pin  = GPIO_Pin_5;   //指定要初始化的IO,
  25   1          GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
  26   1          GPIO_Inilize(GPIO_P4, &GPIO_InitStructure);//初始化
  27   1      
  28   1          // P2
  29   1          GPIO_InitStructure.Pin  = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_3 | GPIO_Pin_2 | GPIO_Pin_1 | GPIO_Pin_0;
             -    //指定要初始化的IO,
  30   1          GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
  31   1          GPIO_Inilize(GPIO_P2, &GPIO_InitStructure);//初始化
  32   1      
  33   1          // P1
  34   1          GPIO_InitStructure.Pin  = GPIO_Pin_5 | GPIO_Pin_4;    //指定要初始化的IO,
  35   1          GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
  36   1          GPIO_Inilize(GPIO_P1, &GPIO_InitStructure);//初始化
  37   1      }
  38          
  39          
  40          /**************************配置 UART***********************/
  41          void UART_config(void) {
  42   1          // >>> 记得添加 NVIC.c, UART.c, UART_Isr.c <<<
  43   1          COMx_InitDefine   COMx_InitStructure;         //结构定义
  44   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
  45   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串
             -口2固定使用BRT_Timer2)
  46   1          COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  47   1          COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  48   1          COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
C51 COMPILER V9.60.7.0   MAIN                                                              08/12/2024 09:12:08 PAGE 2   

  49   1          UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  50   1      
  51   1          NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,
             -Priority_2,Priority_3
  52   1          UART1_SW(UART1_SW_P30_P31);   // 引脚选择, UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_
             -P43_P44
  53   1      }
  54          
  55          /*************  本地变量声明  **************/
  56          
  57          PWMx_Duty dutyA;
  58          
  59          // 频率
  60          #define FREQ    1000
  61          //  1个周期的计数值 24 000 000 / 1000  = 24 000
  62          #define PERIOD  (MAIN_Fosc / FREQ)
  63          
  64          /***************  串口初始化函数 *****************/
  65          void  PWM_config(void)
  66          {
  67   1          PWMx_InitDefine   PWMx_InitStructure;
  68   1          // Positive:积极，正极
  69   1          // Negative:消极，负极
  70   1      
  71   1          // P,N单独选择EnoSelect时，MODE1情况下
  72   1          //        Duty设置的是高电平占比
  73   1      
  74   1          // P,N同时选择EnoSelect时，MODE1情况下
  75   1          //        P正极:Duty设置高电平占比
  76   1          //        N负极:Duty设置低电平占比
  77   1          PWMx_InitStructure.PWM_Mode    =  CCMRn_PWM_MODE2;  // * 模式,    CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MA
             -TCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  78   1          PWMx_InitStructure.PWM_Duty    =  PERIOD * 0.0f;    // *  PWM占空比时间, 0~Period
  79   1          PWMx_InitStructure.PWM_EnoSelect   =   ENO1P | ENO1N;       //  输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,E
             -NO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  80   1          PWM_Configuration(PWM1, &PWMx_InitStructure);
  81   1      
  82   1          PWMx_InitStructure.PWM_Mode    =  CCMRn_PWM_MODE2;  // * 模式,    CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MA
             -TCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  83   1          PWMx_InitStructure.PWM_Duty    =  PERIOD * 0.0f;    // *  PWM占空比时间, 0~Period
  84   1          PWMx_InitStructure.PWM_EnoSelect   =   ENO2P | ENO2N;       //  输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,E
             -NO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  85   1          PWM_Configuration(PWM2, &PWMx_InitStructure);       //初始化PWM
  86   1      
  87   1          PWMx_InitStructure.PWM_Mode    =  CCMRn_PWM_MODE2;  // * 模式,    CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MA
             -TCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  88   1          PWMx_InitStructure.PWM_Duty    =  PERIOD * 0.0f;    // *  PWM占空比时间, 0~Period
  89   1          PWMx_InitStructure.PWM_EnoSelect   =   ENO3P | ENO3N;       //  输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,E
             -NO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  90   1          PWM_Configuration(PWM3, &PWMx_InitStructure);       //初始化PWM
  91   1      
  92   1          PWMx_InitStructure.PWM_Mode    =  CCMRn_PWM_MODE2;  // * 模式,    CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MA
             -TCH_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  93   1          PWMx_InitStructure.PWM_Duty    =  PERIOD * 0.0f;    // *  PWM占空比时间, 0~Period
  94   1          PWMx_InitStructure.PWM_EnoSelect   =   ENO4P | ENO4N;       //  输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,E
             -NO3P,ENO3N,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  95   1          PWM_Configuration(PWM4, &PWMx_InitStructure);       //初始化PWM
  96   1      
  97   1          PWMx_InitStructure.PWM_Period   = PERIOD - 1;         // * 周期时间（1/频率）,   0~65535
  98   1          PWMx_InitStructure.PWM_DeadTime = 0;              //死区发生器设置, 0~255
  99   1          PWMx_InitStructure.PWM_MainOutEnable= ENABLE;     //主输出使能, ENABLE,DISABLE
 100   1          PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;     //使能计数器, ENABLE,DISABLE
C51 COMPILER V9.60.7.0   MAIN                                                              08/12/2024 09:12:08 PAGE 3   

 101   1          PWM_Configuration(PWMA, &PWMx_InitStructure);     //初始化PWM通用寄存器,  PWMA,PWMB
 102   1      
 103   1          PWM4_SW(PWM4_SW_P26_P27);     //PWM4_SW_P16_P17,PWM4_SW_P26_P27,PWM4_SW_P66_P67,PWM4_SW_P34_P33
 104   1          PWM1_SW(PWM1_SW_P20_P21);
 105   1          PWM2_SW(PWM2_SW_P22_P23);
 106   1          PWM3_SW(PWM3_SW_P14_P15);
 107   1      
 108   1          // 禁用PWM中断
 109   1          NVIC_PWM_Init(PWMA,DISABLE,Priority_0);
 110   1      }
 111          void main() {
 112   1          u8 duty_percent = 0;
 113   1          char direction = 1;
 114   1      
 115   1          EAXSFR();   /* 扩展寄存器访问使能 */
 116   1      
 117   1          GPIO_config();
 118   1      
 119   1          UART_config();
 120   1      
 121   1          PWM_config();
 122   1      
 123   1          EA = 1;
 124   1      
 125   1          // 打开总开关
 126   1          LED_SW = 0;
 127   1      
 128   1          // LED2, LED4
 129   1          LED2 = 0;
 130   1          LED1 = 1;
 131   1          LED3 = 1;
 132   1          LED4 = 0;
 133   1          LED5 = 1;
 134   1          LED6 = 0;
 135   1          LED7 = 1;
 136   1          LED8 = 0;
 137   1      
 138   1          while(1) {
 139   2              // 0 -> 100 -> 0 -> .....
 140   2              duty_percent += direction;
 141   2              // 让duty_percent在[0, 100]往返
 142   2              if (duty_percent >= 100) {
 143   3                  direction = -1;
 144   3              } else if (duty_percent <= 0) {
 145   3                  direction = 1;
 146   3              }
 147   2      
 148   2      // 设置新的占空比
 149   2              dutyA.PWM1_Duty = PERIOD * duty_percent / 100;
 150   2              dutyA.PWM2_Duty = PERIOD * duty_percent / 100;
 151   2              dutyA.PWM3_Duty = PERIOD * duty_percent / 100;
 152   2              dutyA.PWM4_Duty = PERIOD * duty_percent / 100;
 153   2              UpdatePwm(PWMA, &dutyA);
 154   2      
 155   2              delay_ms(10);
 156   2          }
 157   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    357    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              08/12/2024 09:12:08 PAGE 4   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
