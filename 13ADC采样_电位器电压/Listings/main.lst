C51 COMPILER V9.60.7.0   MAIN                                                              08/07/2024 15:03:12 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "config.h"
   2          #include "GPIO.H"
   3          #include "ADC.H"
   4          #include "Delay.H"
   5          #include "NVIC.H"
   6          #include "UART.H"
   7          #include "switch.h"
   8          
   9          
  10          void  GPIO_config(void)
  11          {
  12   1      
  13   1          //P05初始化
  14   1          P0_MODE_IN_HIZ(GPIO_Pin_5);
  15   1          //P30 P31 初始化
  16   1          P3_MODE_IO_PU(GPIO_Pin_0 | GPIO_Pin_1);
  17   1      }
  18          
  19          /******************* AD配置函数 *******************/
  20          void  ADC_config(void)
  21          {
  22   1          ADC_InitTypeDef   ADC_InitStructure;    //结构定义
  23   1      
  24   1          ADC_InitStructure.ADC_SMPduty   = 31;   //ADC 模拟信号采样时间控制, 0~31（注意： SMPDUTY 一定不能设置小
             -于 10）
  25   1          ADC_InitStructure.ADC_CsSetup   = 0;    //ADC 通道选择时间控制 0(默认),1
  26   1          ADC_InitStructure.ADC_CsHold    = 1;    //ADC 通道选择保持时间控制 0,1(默认),2,3
  27   1          ADC_InitStructure.ADC_Speed     = ADC_SPEED_2X16T;    //设置 ADC 工作时钟频率 ADC_SPEED_2X1T~ADC_SPEED_2
             -X16T
  28   1          ADC_InitStructure.ADC_AdjResult = ADC_RIGHT_JUSTIFIED;  //ADC结果调整,  ADC_LEFT_JUSTIFIED,ADC_RIGHT_JUS
             -TIFIED
  29   1          ADC_Inilize(&ADC_InitStructure);    //初始化
  30   1          ADC_PowerControl(ENABLE);       //ADC电源开关, ENABLE或DISABLE
  31   1          NVIC_ADC_Init(DISABLE,Priority_0);    //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,P
             -riority_2,Priority_3
  32   1      }
  33          
  34          /***************  串口初始化函数 *****************/
  35          void  UART_config(void)
  36          {
  37   1          COMx_InitDefine   COMx_InitStructure;         //结构定义
  38   1      
  39   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
  40   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串
             -口2固定使用BRT_Timer2)
  41   1          COMx_InitStructure.UART_BaudRate  = 115200ul;       //波特率, 一般 110 ~ 115200
  42   1          COMx_InitStructure.UART_RxEnable  = ENABLE;         //接收允许,   ENABLE或DISABLE
  43   1          COMx_InitStructure.BaudRateDouble = DISABLE;        //波特率加倍, ENABLE或DISABLE
  44   1          UART_Configuration(UART1, &COMx_InitStructure);     //初始化串口1 UART1,UART2,UART3,UART4
  45   1      
  46   1          NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,
             -Priority_2,Priority_3
  47   1      
C51 COMPILER V9.60.7.0   MAIN                                                              08/07/2024 15:03:12 PAGE 2   

  48   1          UART1_SW(UART1_SW_P30_P31);   //UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  49   1      }
  50          
  51          void main() {
  52   1          u16 adc_value;
  53   1          float rst_V;
  54   1      
  55   1          EAXSFR();
  56   1      
  57   1          GPIO_config();
  58   1          ADC_config();
  59   1          UART_config();
  60   1      
  61   1          EA = 1;
  62   1      
  63   1      
  64   1          while(1) {
  65   2              adc_value =Get_ADCResult(ADC_CH13);
  66   2      
  67   2              printf("ADC:%d  ",adc_value);
  68   2      
  69   2              rst_V = adc_value * 2.5 / 4096;//输入电压
  70   2            
  71   2            printf("输入电压为：%.3fV",rst_V);
  72   2      
  73   2              delay_ms(250);
  74   2              delay_ms(250);
  75   2      
  76   2          }
  77   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    195    ----
   CONSTANT SIZE    =     27    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
