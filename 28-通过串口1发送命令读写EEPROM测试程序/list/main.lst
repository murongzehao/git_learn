C51 COMPILER V9.60.7.0   MAIN                                                              08/16/2024 19:36:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: e:\Keil_v5\C51\BIN\C51.EXE main.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\list\main.lst) TABS(2
                    -) OBJECT(.\list\main.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCAI.com ---------------------------------------------*/
   8          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "config.h"
  14          #include  "GPIO.h"
  15          #include  "UART.h"
  16          #include  "Delay.h"
  17          #include  "NVIC.h"
  18          #include  "EEPROM.h"
  19          #include  "Switch.h"
  20          
  21          /*************  本程序功能说明  **************
  22          
  23          本例程基于STC8H8K64U为主控芯片的实验箱8进行编写测试，STC8G、STC8H系列芯片可通用参考.
  24          
  25          通过串口对STC内部自带的EEPROM(FLASH)进行读写测试。
  26          
  27          对FLASH做扇区擦除、写入、读出的操作，命令指定地址。
  28          
  29          默认波特率:  115200,N,8,1. 
  30          
  31          串口命令设置: (命令字母不区分大小写)
  32              E 0x0040             --> 对0x0040地址扇区内容进行擦除.
  33              W 0x0040 1234567890  --> 对0x0040地址写入字符1234567890.
  34              R 0x0040 10          --> 对0x0040地址读出10个字节数据. 
  35          
  36          注意：下载时，下载界面"硬件选项"中设置用户EEPROM大小，
  37          
  38          并确保串口命令中的地址在EEPROM设置的大小范围之内。
  39          
  40          下载时, 选择时钟 24MHz (可以在配置文件"config.h"中修改).
  41          
  42          ******************************************/
  43          
  44          #define     Max_Length          100      //读写EEPROM缓冲长度
  45          
  46          /*************  本地常量声明  **************/
  47          
  48          
  49          /*************  本地变量声明  **************/
  50          u8  xdata   tmp[Max_Length];        //EEPROM操作缓冲
  51          
  52          
  53          /*************  本地函数声明  **************/
  54          
C51 COMPILER V9.60.7.0   MAIN                                                              08/16/2024 19:36:53 PAGE 2   

  55          
  56          /*************  外部函数和变量声明 *****************/
  57          
  58          
  59          /******************* IO配置函数 *******************/
  60          void  GPIO_config(void)
  61          {
  62   1        GPIO_InitTypeDef  GPIO_InitStructure;   //结构定义
  63   1      
  64   1        GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1;    //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7
  65   1        GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_O
             -UT_PP
  66   1        GPIO_Inilize(GPIO_P3,&GPIO_InitStructure);  //初始化
  67   1      }
  68          
  69          /***************  串口初始化函数 *****************/
  70          void  UART_config(void)
  71          {
  72   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
  73   1      
  74   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART
             -_9bit_BRTx
  75   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2
             -固定使用BRT_Timer2)
  76   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  77   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  78   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
  79   1        UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  80   1        NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pri
             -ority_2,Priority_3
  81   1      }
  82          
  83          /**********************************************/
  84          
  85          u8  CheckData(u8 dat)
  86          {
  87   1        if((dat >= '0') && (dat <= '9'))    return (dat-'0');
  88   1        if((dat >= 'A') && (dat <= 'F'))    return (dat-'A'+10);
  89   1        if((dat >= 'a') && (dat <= 'f'))    return (dat-'a'+10);
  90   1        return 0xff;
  91   1      }
  92          
  93          //========================================================================
  94          // 函数: u16    GetAddress(void)
  95          // 描述: 计算各种输入方式的地址.
  96          // 参数: 无.
  97          // 返回: 16位EEPROM地址.
  98          // 版本: V1.0, 2013-6-6
  99          //========================================================================
 100          u16 GetAddress(void)
 101          {
 102   1        u16 address;
 103   1        u8  i,j;
 104   1        
 105   1        address = 0;
 106   1        if((RX1_Buffer[2] == '0') && (RX1_Buffer[3] == 'X'))
 107   1        {
 108   2          for(i=4; i<8; i++)
 109   2          {
 110   3            j = CheckData(RX1_Buffer[i]);
 111   3            if(j >= 0x10)   return 65535;   //error
 112   3            address = (address << 4) + j;
C51 COMPILER V9.60.7.0   MAIN                                                              08/16/2024 19:36:53 PAGE 3   

 113   3          }
 114   2          return (address);
 115   2        }
 116   1        return  65535;  //error
 117   1      }
 118          
 119          /**************** 获取要读出数据的字节数 ****************************/
 120          u8 GetDataLength(void)
 121          {
 122   1        u8  i;
 123   1        u8  length;
 124   1        
 125   1        length = 0;
 126   1        for(i=9; i<COM1.RX_Cnt; i++)
 127   1        {
 128   2          if(CheckData(RX1_Buffer[i]) >= 10)  break;
 129   2          length = length * 10 + CheckData(RX1_Buffer[i]);
 130   2        }
 131   1        return (length);
 132   1      }
 133          
 134          /********************* 主函数 *************************/
 135          void main(void)
 136          {
 137   1        u8  i,j;
 138   1        u16 addr;
 139   1        u8  status;
 140   1      
 141   1        EAXSFR();   /* 扩展寄存器访问使能 */
 142   1        GPIO_config();
 143   1        UART_config();
 144   1        EA = 1;
 145   1      
 146   1        PrintString1("STC8系列单片机EEPROM测试程序，串口命令设置如下:\r\n");    //UART1发送一个字符串
 147   1        PrintString1("E 0x0040             --> 对0x0040地址扇区内容进行擦除\xfd.\r\n");     //UART1发送一个字符串
 148   1        PrintString1("W 0x0040 1234567890  --> 对0x0040地址写入字符1234567890.\r\n");  //UART1发送一个字符串
 149   1        PrintString1("R 0x0040 10          --> 对0x0040地址读出10个字节内容.\r\n");    //UART1发送一个字符串
 150   1        while(1)
 151   1        {
 152   2          delay_ms(1);
 153   2          if(COM1.RX_TimeOut > 0)   //超时计数
 154   2          {
 155   3            if(--COM1.RX_TimeOut == 0)
 156   3            {
 157   4              for(i=0; i<COM1.RX_Cnt; i++)    TX1_write2buff(RX1_Buffer[i]);    //把收到的数据原样返回,用于测试
 158   4      
 159   4              status = 0xff;  //状态给一个非0值
 160   4              if((COM1.RX_Cnt >= 8) && (RX1_Buffer[1] == ' ')) //最短命令为8个字节
 161   4              {
 162   5                for(i=0; i<8; i++)
 163   5                {
 164   6                  if((RX1_Buffer[i] >= 'a') && (RX1_Buffer[i] <= 'z'))    RX1_Buffer[i] = RX1_Buffer[i] - 'a' + 'A';  
             -//小写转大写
 165   6                }
 166   5                addr = GetAddress();
 167   5                if(addr < 63488)    //限制在0~123扇区
 168   5                {
 169   6                  if(RX1_Buffer[0] == 'E')    //写入N个字节
 170   6                  {
 171   7                    EEPROM_SectorErase(addr);           //擦除扇区
 172   7                    PrintString1("擦除\xfd成功！\r\n");
 173   7                    status = 0; //命令正确
C51 COMPILER V9.60.7.0   MAIN                                                              08/16/2024 19:36:53 PAGE 4   

 174   7                  }
 175   6      
 176   6                  else if((RX1_Buffer[0] == 'W') && (RX1_Buffer[8] == ' '))    //写入N个字节
 177   6                  {
 178   7                    j = COM1.RX_Cnt - 9;
 179   7                    if(j > Max_Length)  j = Max_Length; //越界检测
 180   7                    //EEPROM_SectorErase(addr);           //擦除扇区
 181   7                    EEPROM_write_n(addr,&RX1_Buffer[9],j);      //写N个字节
 182   7                    PrintString1("已写入");
 183   7                    if(j >= 100)    {TX1_write2buff(j/100+'0');   j = j % 100;}
 184   7                    if(j >= 10)     {TX1_write2buff(j/10+'0');    j = j % 10;}
 185   7                    TX1_write2buff(j%10+'0');
 186   7                    PrintString1("字节！\r\n");
 187   7                    status = 0; //命令正确
 188   7                  }
 189   6      
 190   6                  else if((RX1_Buffer[0] == 'R') && (RX1_Buffer[8] == ' '))   //PC请求返回N字节EEPROM数据
 191   6                  {
 192   7                    j = GetDataLength();
 193   7                    if(j > Max_Length)  j = Max_Length; //越界检测
 194   7                    if(j > 0)
 195   7                    {
 196   8                      PrintString1("读出");
 197   8                      TX1_write2buff(j/10+'0');
 198   8                      TX1_write2buff(j%10+'0');
 199   8                      PrintString1("个字节内容如下：\r\n");
 200   8                      EEPROM_read_n(addr,tmp,j);
 201   8                      for(i=0; i<j; i++)  TX1_write2buff(tmp[i]);
 202   8                      TX1_write2buff(0x0d);
 203   8                      TX1_write2buff(0x0a);
 204   8                      status = 0; //命令正确
 205   8                    }
 206   7                  }
 207   6                }
 208   5              }
 209   4              if(status != 0) PrintString1("命令错误！\r\n");
 210   4              COM1.RX_Cnt = 0;
 211   4            }
 212   3          }
 213   2        }
 214   1      } 
 215          /**********************************************/
 216          
 217          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    755    ----
   CONSTANT SIZE    =    289    ----
   XDATA SIZE       =    100    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
