C51 COMPILER V9.60.7.0   MAIN                                                              08/11/2024 12:31:37 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: e:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "Config.h"
   2          #include "GPIO.h"
   3          #include "Delay.h"
   4          #include "UART.h"
   5          #include "NVIC.h"
   6          #include "Switch.h"
   7          #include  "STC8H_PWM.h"
   8          
   9          
  10          PWMx_Duty dutyA;
  11          
  12          // frequency 频率  （>= 367Hz）
  13          #define FREQ    1000
  14          
  15          // period 周期  [0, 65535]
  16          #define PERIOD (MAIN_Fosc / FREQ)
  17          
  18          
  19          #define LED_SW    P45
  20          #define LED1      P27
  21          #define LED2      P26
  22          #define LED3      P15
  23          #define LED4      P14
  24          #define LED5      P23
  25          #define LED6      P22
  26          #define LED7      P21
  27          #define LED8      P20
  28          
  29          
  30          /******************* IO配置函数 *******************/
  31          void  GPIO_config(void)
  32          {
  33   1          GPIO_InitTypeDef  GPIO_InitStructure;   //结构定义
  34   1      
  35   1          GPIO_InitStructure.Pin  = GPIO_Pin_5;   //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7
  36   1          GPIO_InitStructure.Mode = GPIO_PullUp;      //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,
             -GPIO_OUT_PP
  37   1          GPIO_Inilize(GPIO_P4,&GPIO_InitStructure);  //初始化
  38   1      
  39   1          GPIO_InitStructure.Pin  = GPIO_Pin_5 | GPIO_Pin_4;    //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7
  40   1          GPIO_InitStructure.Mode = GPIO_PullUp;      //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,
             -GPIO_OUT_PP
  41   1          GPIO_Inilize(GPIO_P1,&GPIO_InitStructure);  //初始化
  42   1      
  43   1          GPIO_InitStructure.Pin  = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 | GPIO_Pin_7;
             -    //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7
  44   1          GPIO_InitStructure.Mode = GPIO_PullUp;      //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,
             -GPIO_OUT_PP
  45   1          GPIO_Inilize(GPIO_P2,&GPIO_InitStructure);  //初始化
  46   1      }
  47          
  48          /***************  串口初始化函数 *****************/
  49          void  UART_config(void)
  50          {
C51 COMPILER V9.60.7.0   MAIN                                                              08/11/2024 12:31:37 PAGE 2   

  51   1          COMx_InitDefine   COMx_InitStructure;         //结构定义
  52   1      
  53   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
  54   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串
             -口2固定使用BRT_Timer2)
  55   1          COMx_InitStructure.UART_BaudRate  = 115200ul;       //波特率, 一般 110 ~ 115200
  56   1          COMx_InitStructure.UART_RxEnable  = ENABLE;         //接收允许,   ENABLE或DISABLE
  57   1          COMx_InitStructure.BaudRateDouble = DISABLE;        //波特率加倍, ENABLE或DISABLE
  58   1          UART_Configuration(UART1, &COMx_InitStructure);     //初始化串口1 UART1,UART2,UART3,UART4
  59   1      
  60   1          NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,
             -Priority_2,Priority_3
  61   1      
  62   1          UART1_SW(UART1_SW_P30_P31);   //UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  63   1      }
  64          
  65          void  PWM_config(void)
  66          {
  67   1          PWMx_InitDefine   PWMx_InitStructure;
  68   1          // 配置PWM1
  69   1          PWMx_InitStructure.PWM_Mode       = CCMRn_PWM_MODE2;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATC
             -H_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  70   1          PWMx_InitStructure.PWM_Duty       = dutyA.PWM1_Duty;  //PWM占空比时间, 0~Period
  71   1          PWMx_InitStructure.PWM_EnoSelect  = ENO1N | ENO1P;  //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N
             -,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  72   1          PWM_Configuration(PWM1, &PWMx_InitStructure);
  73   1      
  74   1          // 配置PWM2
  75   1          PWMx_InitStructure.PWM_Mode       = CCMRn_PWM_MODE2;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATC
             -H_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  76   1          PWMx_InitStructure.PWM_Duty       = dutyA.PWM2_Duty;  //PWM占空比时间, 0~Period
  77   1          PWMx_InitStructure.PWM_EnoSelect  = ENO2N | ENO2P;  //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N
             -,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  78   1          PWM_Configuration(PWM2, &PWMx_InitStructure);
  79   1      
  80   1          // 配置PWM3
  81   1          PWMx_InitStructure.PWM_Mode       = CCMRn_PWM_MODE2;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATC
             -H_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  82   1          PWMx_InitStructure.PWM_Duty       = dutyA.PWM3_Duty;  //PWM占空比时间, 0~Period
  83   1          PWMx_InitStructure.PWM_EnoSelect  = ENO3N | ENO3P;  //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N
             -,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  84   1          PWM_Configuration(PWM3, &PWMx_InitStructure);
  85   1      
  86   1      
  87   1          // 配置PWM4
  88   1          PWMx_InitStructure.PWM_Mode       = CCMRn_PWM_MODE2;  //模式,   CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATC
             -H_INVALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  89   1          PWMx_InitStructure.PWM_Duty       = dutyA.PWM4_Duty;  //PWM占空比时间, 0~Period
  90   1          PWMx_InitStructure.PWM_EnoSelect  = ENO4N | ENO4P;  //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N
             -,ENO4P,ENO4N / ENO5P,ENO6P,ENO7P,ENO8P
  91   1          PWM_Configuration(PWM4, &PWMx_InitStructure);
  92   1      
  93   1          // 配置PWMA
  94   1          PWMx_InitStructure.PWM_Period   = PERIOD - 1;       //周期时间,   0~65535
  95   1          PWMx_InitStructure.PWM_DeadTime = 0;          //死区发生器设置, 0~255
  96   1          PWMx_InitStructure.PWM_MainOutEnable= ENABLE;     //主输出使能, ENABLE,DISABLE
  97   1          PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;     //使能计数器, ENABLE,DISABLE
  98   1          PWM_Configuration(PWMA, &PWMx_InitStructure);     //初始化PWM通用寄存器,  PWMA,PWMB
  99   1      
 100   1          // 切换PWM通道
 101   1          PWM1_SW(PWM1_SW_P20_P21);     //PWM1_SW_P10_P11,PWM1_SW_P20_P21,PWM1_SW_P60_P61
C51 COMPILER V9.60.7.0   MAIN                                                              08/11/2024 12:31:37 PAGE 3   

 102   1          PWM2_SW(PWM2_SW_P22_P23);     //PWM2_SW_P12_P13,PWM2_SW_P22_P23,PWM2_SW_P62_P63
 103   1          PWM3_SW(PWM3_SW_P14_P15);     //PWM3_SW_P14_P15,PWM3_SW_P24_P25,PWM3_SW_P64_P65
 104   1          PWM4_SW(PWM4_SW_P26_P27);     //PWM4_SW_P16_P17,PWM4_SW_P26_P27,PWM4_SW_P66_P67,PWM4_SW_P34_P33
 105   1      
 106   1          // 初始化PWMA的中断
 107   1          NVIC_PWM_Init(PWMA,DISABLE,Priority_0);
 108   1      }
 109          
 110          
 111          int duty_percent = 0; // [0, 100]
 112          
 113          void on_uart1_recv() {
 114   1          // RX1_Buffer[i]存的是接收的每个字节，写出用 TX1_write2buff
 115   1          u8 dat = RX1_Buffer[0];
 116   1      
 117   1          if (dat == 0x00) {
 118   2              duty_percent -= 1;
 119   2          } else if( dat == 0x01) {
 120   2              duty_percent += 1;
 121   2          }
 122   1      
 123   1          //限制duty_percent的范围
 124   1          if(duty_percent > 100) duty_percent = 100;
 125   1          else if(duty_percent < 0) duty_percent = 0;
 126   1          printf("duty_percent:%d\n",duty_percent);
 127   1      
 128   1          //修改占空比
 129   1          dutyA.PWM1_Duty = PERIOD * duty_percent / 100 ;
 130   1          dutyA.PWM2_Duty = PERIOD * duty_percent / 100 ;
 131   1          dutyA.PWM3_Duty = PERIOD * duty_percent / 100 ;
 132   1          dutyA.PWM4_Duty = PERIOD * duty_percent / 100 ;
 133   1          UpdatePwm(PWMA, &dutyA);
 134   1      
 135   1      }
 136          void main() {
 137   1          u8 dat = RX1_Buffer[0];
 138   1      
 139   1          EAXSFR();
 140   1          GPIO_config();
 141   1          UART_config();
 142   1          PWM_config();
 143   1      
 144   1          //设置占空比
 145   1      //    dutyA.PWM1_Duty = PERIOD * 0;
 146   1      //    dutyA.PWM2_Duty = PERIOD * 0;
 147   1      //    dutyA.PWM3_Duty = PERIOD * 0;
 148   1      //    dutyA.PWM4_Duty = PERIOD * 0;
 149   1      
 150   1          //全局中断
 151   1          EA = 1;
 152   1      
 153   1          //开启总开关
 154   1          LED_SW = 0;
 155   1          while(1) {
 156   2      
 157   2              if(COM1.RX_TimeOut > 0) {
 158   3                  //超时计数
 159   3                  if(--COM1.RX_TimeOut == 0) {
 160   4                      if(COM1.RX_Cnt > 0) {
 161   5                          if (dat == 0x00) {
 162   6                              duty_percent -= 1;
 163   6                          } else if( dat == 0x01) {
C51 COMPILER V9.60.7.0   MAIN                                                              08/11/2024 12:31:37 PAGE 4   

 164   6                              duty_percent += 1;
 165   6                          }
 166   5      
 167   5                          //限制duty_percent的范围
 168   5                          if(duty_percent > 100) duty_percent = 100;
 169   5                          else if(duty_percent < 0) duty_percent = 0;
 170   5                          printf("duty_percent:%d\n",duty_percent);
 171   5      
 172   5                          //修改占空比
 173   5                          dutyA.PWM1_Duty = PERIOD * duty_percent / 100 ;
 174   5                          dutyA.PWM2_Duty = PERIOD * duty_percent / 100 ;
 175   5                          dutyA.PWM3_Duty = PERIOD * duty_percent / 100 ;
 176   5                          dutyA.PWM4_Duty = PERIOD * duty_percent / 100 ;
 177   5                          UpdatePwm(PWMA, &dutyA);
 178   5      
 179   5                      }
 180   4                      COM1.RX_Cnt = 0;
 181   4                  }
 182   3      
 183   3      
 184   3              }
 185   2              // 不要处理的太快
 186   2              delay_ms(1);
 187   2          }
 188   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    572    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
