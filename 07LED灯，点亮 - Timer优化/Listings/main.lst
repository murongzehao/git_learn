C51 COMPILER V9.60.7.0   MAIN                                                              08/05/2024 21:08:10 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "config.h"
   2          #include  "GPIO.h"
   3          #include  "UART.h"
   4          #include  "Delay.h"
   5          #include  "NVIC.h"
   6          #include  "Switch.h"
   7          #include "Timer.h"
   8          
   9          
  10          
  11          #define LED_SW      P45
  12          #define LED1        P27
  13          #define LED2        P26
  14          #define LED3        P15
  15          #define LED4        P14
  16          #define LED5        P23
  17          #define LED6        P22
  18          #define LED7        P21
  19          #define LED8        P20
  20          
  21          void GPIO_config(void) {
  22   1          GPIO_InitTypeDef  GPIO_InitStructure;   //结构定义
  23   1      
  24   1          // LED_SW
  25   1          GPIO_InitStructure.Pin  = GPIO_Pin_5;   //指定要初始化的IO,
  26   1          GPIO_InitStructure.Mode = GPIO_OUT_PP;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
  27   1          GPIO_Inilize(GPIO_P4, &GPIO_InitStructure);//初始化
  28   1      
  29   1          // P2
  30   1          GPIO_InitStructure.Pin  = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_3 | GPIO_Pin_2 | GPIO_Pin_1 | GPIO_Pin_0;
             -    //指定要初始化的IO,
  31   1          GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
  32   1          GPIO_Inilize(GPIO_P2, &GPIO_InitStructure);//初始化
  33   1      
  34   1          //P1
  35   1          GPIO_InitStructure.Pin = GPIO_Pin_4 | GPIO_Pin_5;
  36   1          GPIO_InitStructure.Mode = GPIO_PullUp;
  37   1          GPIO_Inilize(GPIO_P1,&GPIO_InitStructure);
  38   1      }
  39          
  40          /***************  串口初始化函数 *****************/
  41          void  UART_config(void)
  42          {
  43   1          COMx_InitDefine   COMx_InitStructure;         //结构定义
  44   1      
  45   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
  46   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串
             -口2固定使用BRT_Timer2)
  47   1          COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  48   1          COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  49   1          COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
C51 COMPILER V9.60.7.0   MAIN                                                              08/05/2024 21:08:10 PAGE 2   

  50   1          UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  51   1          NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,
             -Priority_2,Priority_3
  52   1      
  53   1          UART1_SW(UART1_SW_P30_P31);   //UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  54   1      }
  55          
  56          
  57          /***************  定时器初始化函数 *****************/
  58          void  Timer_config(void)
  59          {
  60   1          TIM_InitTypeDef   TIM_InitStructure;            //结构定义
  61   1          //定时器0做16位自动重装, 中断频率为1000HZ
  62   1          TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit
             -,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask
  63   1          TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;   //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOC
             -K_Ext
  64   1          TIM_InitStructure.TIM_ClkOut    = DISABLE;        //是否输出高速脉冲, ENABLE或DISABLE
  65   1          TIM_InitStructure.TIM_Value     = 65536UL - (MAIN_Fosc / 1000UL);   //初值,
  66   1          TIM_InitStructure.TIM_Run       = ENABLE;       //是否初始化后启动定时器, ENABLE或DISABLE
  67   1          Timer_Inilize(Timer0,&TIM_InitStructure);       //初始化Timer0    Timer0,Timer1,Timer2,Timer3,Timer4
  68   1          NVIC_Timer0_Init(ENABLE,Priority_0);    //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1
             -,Priority_2,Priority_3
  69   1      }
  70          
  71          u8 temp = 2;
  72          
  73          void timer0_call() {
  74   1          //循环在这里判断并处理接收到的数据
  75   1          if(COM1.RX_TimeOut > 0 &&  --COM1.RX_TimeOut == 0)//RX_TimeOut 接收超时
  76   1          {
  77   2              if(COM1.RX_Cnt > 0)//判断是否有数据
  78   2              {
  79   3                  //RX1_Buffer[i]存的是接受的每个字节，写出用TX1_write2buff
  80   3                  if(RX1_Buffer[0] == 0x00) { //第一个字节=0
  81   4                      temp = 0;
  82   4                  }
  83   3                  else if (RX1_Buffer[0] == 0x01) {
  84   4                      temp = 1;
  85   4      
  86   4                  }
  87   3                  //清零数据计数值
  88   3                  COM1.RX_Cnt = 0;
  89   3              }
  90   2      
  91   2      
  92   2      
  93   2          }
  94   1      
  95   1      }
  96          /****************************
  97          通过串口控制，实现左转弯流水灯和右转弯流水灯效果
  98            a. 串口发送数字0，左转弯
  99            b. 串口发送数字1，右转弯
 100          
 101          1. Timer以1000Hz运行，在Timer中断里，判定串口接收数据
 102            - 收到数据0，将一个全局变量修改为0
 103            - 收到数据1，将一个全局变量修改为1
 104          
 105          2. main函数的while循环，不断判断变量值
 106            - 根据此全局变量，进行流水灯操作
 107            - 将变量值恢复为2
C51 COMPILER V9.60.7.0   MAIN                                                              08/05/2024 21:08:10 PAGE 3   

 108          
 109          ****************************/
 110          
 111          
 112          void main() {
 113   1          int8 i;
 114   1      
 115   1          GPIO_config();
 116   1          UART_config();
 117   1          Timer_config();
 118   1      
 119   1          EA = 1;
 120   1      
 121   1          LED_SW = 0;
 122   1      
 123   1          // LED, 先全部关掉
 124   1          LED1 = LED2 = LED3 = LED4 = LED5 = LED6 = LED7 = LED8 = 1;
 125   1      
 126   1      
 127   1          while(1) {
 128   2              if( temp == 0x00) {
 129   3                  temp = 0x02;
 130   3                  for(i = 0; i <= 8; i++)
 131   3                  {
 132   4                      if( i == 0) LED1 = 0;
 133   4                      else if (i == 1) LED2 = 0;
 134   4                      else if (i == 2) LED3 = 0;
 135   4                      else if (i == 3) LED4 = 0;
 136   4                      else if (i == 4) LED5 = 0;
 137   4                      else if (i == 5) LED6 = 0;
 138   4                      else if (i == 6) LED7 = 0;
 139   4                      else if (i == 7) LED8 = 0;
 140   4                      delay_ms(100);
 141   4                  }
 142   3                  delay_ms(250);
 143   3                  LED1 = LED2 = LED3 = LED4 = LED5 = LED6 = LED7 = LED8 = 1;
 144   3      
 145   3              }
 146   2              else if(temp == 0x01) {
 147   3                  temp = 0x02;
 148   3                  for(i = 7; i >= -1; i--)
 149   3                  {
 150   4                      if( i == 0) LED1 = 0;
 151   4                      else if (i == 1) LED2 = 0;
 152   4                      else if (i == 2) LED3 = 0;
 153   4                      else if (i == 3) LED4 = 0;
 154   4                      else if (i == 4) LED5 = 0;
 155   4                      else if (i == 5) LED6 = 0;
 156   4                      else if (i == 6) LED7 = 0;
 157   4                      else if (i == 7) LED8 = 0;
 158   4                      delay_ms(100);
 159   4                  }
 160   3                  delay_ms(250);
 161   3                  LED1 = LED2 = LED3 = LED4 = LED5 = LED6 = LED7 = LED8 = 1;
 162   3      
 163   3              }
 164   2      
 165   2      
 166   2      
 167   2      
 168   2      
 169   2      
C51 COMPILER V9.60.7.0   MAIN                                                              08/05/2024 21:08:10 PAGE 4   

 170   2          }
 171   1      
 172   1      }
 173          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    421    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
